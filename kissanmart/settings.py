"""
Django settings for kissanmart project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env.local early so values like DATABASE_URL are available to the
# configuration below when running in development. This uses python-dotenv if
# installed; if not present, we proceed and expect env vars to be set externally.
try:
    from dotenv import load_dotenv

    DOTENV_PATH = BASE_DIR / 'kissanmart' / '.env'
    load_dotenv(DOTENV_PATH)
except Exception:
    pass


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Read from environment; fall back to the existing hard-coded key for dev
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-n-#+*mpf*gz!(3)u_)^$ea_nl_)-7pa!mc@g_opx!54g6l6@lu')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'True').lower() in ('1', 'true', 'yes')

# ALLOWED_HOSTS can be provided as comma-separated list in env
ALLOWED_HOSTS = ['api.kissansmartconnect.com','kissansmartconnect.com']
if os.getenv('DJANGO_ALLOWED_HOSTS'):
    ALLOWED_HOSTS.extend(os.getenv('DJANGO_ALLOWED_HOSTS').split(','))
else:
    ALLOWED_HOSTS.extend(['localhost', '127.0.0.1', 'testserver'])


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',
    'users',
    'products',
    'cart',
    'orders',
    'drf_spectacular',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'kissanmart.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'kissanmart.wsgi.application'


# Database
# This project is configured to use a single canonical database provided via
# the `DATABASE_URL` environment variable (e.g. a Postgres URL). We intentionally
# avoid falling back to a local sqlite file to ensure data is stored only on the
# configured database.
DATABASES = {}

# Parse DATABASE_URL. dj-database-url is the preferred parser and is included
# in requirements.txt. If it is not available, fall back to a minimal parser for
# common postgres URLs. If parsing fails, DATABASES will remain empty.
# DATABASE_URL = os.getenv('DATABASE_URL')
# if DATABASE_URL:
#     try:
#         import dj_database_url

#         DATABASES['default'] = dj_database_url.parse(DATABASE_URL, conn_max_age=600)
#     except Exception:
#         # Basic fallback parser for Postgres-style URLs (postgres://...)
#         try:
#             url = urlparse(DATABASE_URL)
#             if url.scheme in ('postgres', 'postgresql'):
#                 DATABASES['default'] = {
#                     'ENGINE': 'django.db.backends.postgresql',
#                     'NAME': url.path.lstrip('/'),
#                     'USER': url.username,
#                     'PASSWORD': url.password,
#                     'HOST': url.hostname,
#                     'PORT': url.port or '',
#                 }
#         except Exception:
#             # leave DATABASES empty on parse failure
#             pass

# If no DATABASE_URL was provided, we intentionally keep DATABASES empty.
# Some management commands or local development may expect a DB; developers can
# create a local `.env.local` with DATABASE_URL set to a local Postgres URL.

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        'ENGINE': 'django.db.backends.postgresql',
        # 'NAME': BASE_DIR / 'db.sqlite3',
        'NAME': os.getenv('DATABASE_NAME'),
        'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
        'HOST': os.getenv('DATABASE_HOST', 'localhost'),
        'PORT': os.getenv('DATABASE_PORT', '5432'),
    }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / "staticfiles"

# Media files
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / "media"

# Optional remote storage (S3). If AWS_S3_BUCKET_NAME is set, use django-storages
# to store media files on S3 instead of the local filesystem. Requires
# `boto3` and `django-storages` in production.
AWS_S3_BUCKET_NAME = os.getenv('AWS_S3_BUCKET_NAME')
if AWS_S3_BUCKET_NAME:
    # Read common AWS env vars
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
    AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME') or None
    AWS_S3_CUSTOM_DOMAIN = os.getenv('AWS_S3_CUSTOM_DOMAIN') or f'{AWS_S3_BUCKET_NAME}.s3.amazonaws.com'
    AWS_DEFAULT_ACL = os.getenv('AWS_DEFAULT_ACL', None)

    # Use S3 for default file storage (media)
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

    # Optionally serve static files from S3 when configured
    if os.getenv('AWS_S3_STATIC_BUCKET_NAME'):
        STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
        STATIC_URL = f'https://{os.getenv("AWS_S3_STATIC_CUSTOM_DOMAIN", AWS_S3_CUSTOM_DOMAIN)}/static/'
    else:
        # keep existing static settings; media will be on S3
        STATIC_URL = os.getenv('STATIC_URL', STATIC_URL)

    # Build MEDIA_URL to point to S3
    MEDIA_URL = f'https://{os.getenv("AWS_S3_CUSTOM_DOMAIN", AWS_S3_CUSTOM_DOMAIN)}/media/'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    # Allow multipart/form-data (file uploads) and form parsing for endpoints that accept files
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# DRF Spectacular Configuration
SPECTACULAR_SETTINGS = {
    'TITLE': 'KissanMart API',
    'DESCRIPTION': 'API for KissanMart - Connecting Farmers and Buyers',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    # OTHER SETTINGS
}

# CORS Configuration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "https://kissanmart-frontend.vercel.app",
    "https://kissansmartconnect.com",   
    "https://www.kissansmartconnect.com"
]

CORS_ALLOW_ALL_ORIGINS = False  # Changed to False for security; only allow specified origins
# Note: Added https://kissanmart-frontend.vercel.app to CORS_ALLOWED_ORIGINS

# Additional CORS settings for better frontend integration
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-admin-token',
]

# Custom User Model
AUTH_USER_MODEL = 'users.CustomUser'

# OTP Configuration
OTP_EXPIRY_MINUTES = 10

# Django Sites Framework (required for allauth)
SITE_ID = 1

# Django Allauth Configuration
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Allauth settings (modernized)
# Use ACCOUNT_LOGIN_METHODS to specify how users login
ACCOUNT_LOGIN_METHODS = {'email'}
# Use ACCOUNT_SIGNUP_FIELDS to control required signup fields on forms
ACCOUNT_SIGNUP_FIELDS = ['email*']
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_VERIFICATION = 'none'  # We'll handle verification ourselves
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_SESSION_REMEMBER = True

# Social Account Settings
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_QUERY_EMAIL = True

# Google OAuth Settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
    'facebook': {
        'METHOD': 'oauth2',
        'SDK_URL': '//connect.facebook.net/{locale}/sdk.js',
        'SCOPE': ['email', 'public_profile'],
        'AUTH_PARAMS': {'auth_type': 'reauthenticate'},
        'INIT_PARAMS': {'cookie': True},
        'FIELDS': [
            'id',
            'first_name',
            'last_name',
            'middle_name',
            'name',
            'name_format',
            'picture',
            'short_name',
            'email'
        ],
        'EXCHANGE_TOKEN': True,
        'LOCALE_FUNC': 'path.to.callable',
        'VERIFIED_EMAIL': False,
        'VERSION': 'v17.0',
    }
}

# Social Auth API Keys (to be set in environment variables in production)
# These are dummy values - replace with actual keys
# Read social auth keys from environment; fall back to placeholders when missing
GOOGLE_OAUTH2_CLIENT_ID = os.getenv('GOOGLE_OAUTH2_CLIENT_ID', 'your-google-client-id')
GOOGLE_OAUTH2_CLIENT_SECRET = os.getenv('GOOGLE_OAUTH2_CLIENT_SECRET', '')
FACEBOOK_APP_ID = os.getenv('FACEBOOK_APP_ID', 'your-facebook-app-id')
FACEBOOK_APP_SECRET = os.getenv('FACEBOOK_APP_SECRET', '')

# Mandi API Key
MANDI_API_KEY = os.getenv('MANDI_API_KEY', '')

# Razorpay Configuration
RAZORPAY_KEY_ID = os.getenv('RAZORPAY_KEY_ID', '')
RAZORPAY_KEY_SECRET = os.getenv('RAZORPAY_KEY_SECRET', '')

# Pexels API Configuration
PEXELS_API_KEY = os.getenv('PEXELS_API_KEY', '')

# Shiprocket API Configuration  
SHIPROCKET_API_EMAIL = os.getenv('SHIPROCKET_API_EMAIL', '')
SHIPROCKET_API_PASSWORD = os.getenv('SHIPROCKET_API_PASSWORD', '')

# Load .env.local automatically in development if python-dotenv is installed
try:
    from dotenv import load_dotenv
    # Load environment variables from project .env.local (if present)
    DOTENV_PATH = BASE_DIR / 'kissanmart' / '.env.local'
    load_dotenv(DOTENV_PATH)
    # Re-read values in case they were loaded from .env.local
    GOOGLE_OAUTH2_CLIENT_ID = os.getenv('GOOGLE_OAUTH2_CLIENT_ID', GOOGLE_OAUTH2_CLIENT_ID)
    GOOGLE_OAUTH2_CLIENT_SECRET = os.getenv('GOOGLE_OAUTH2_CLIENT_SECRET', GOOGLE_OAUTH2_CLIENT_SECRET)
    FACEBOOK_APP_ID = os.getenv('FACEBOOK_APP_ID', FACEBOOK_APP_ID)
    FACEBOOK_APP_SECRET = os.getenv('FACEBOOK_APP_SECRET', FACEBOOK_APP_SECRET)
    # Admin credentials for simple admin APIs
    # These must be provided through environment variables in production.
    # For development, you can add them to <project>/kissanmart/.env.local
    ADMIN_USERNAME = os.getenv('ADMIN_USERNAME')
    ADMIN_PASSWORD = os.getenv('ADMIN_PASSWORD')
    # MSG91 / OTP provider configuration (read from environment/.env.local)
    OTP_PROVIDER = os.getenv('OTP_PROVIDER', 'msg91')
    OTP_URL = os.getenv('OTP_URL', os.getenv('MSG91_OTP_URL', 'https://control.msg91.com/api/v5/flow/'))
    OTP_FLOW_ID = os.getenv('FLOW_ID', os.getenv('OTP_FLOW_ID', os.getenv('MSG91_FLOW_ID', '')))
    OTP_SENDER_ID = os.getenv('SENDER_ID', os.getenv('OTP_SENDER_ID', os.getenv('MSG91_SENDER_ID', '')))
    OTP_AUTH_KEY = os.getenv('AUTH_KEY', os.getenv('OTP_AUTH_KEY', os.getenv('MSG91_AUTH_KEY', '')))
    # Weather API key (weatherapi.com) and optional default coordinates
    WEATHER_API_KEY = os.getenv('WEATHER_API_KEY', os.getenv('WEATHER_API_KEY', ''))
    WEATHER_DEFAULT_CITY = os.getenv('WEATHER_DEFAULT_CITY', 'Delhi')
    # Default coordinates for the default city (used when user has no coords)
    try:
        WEATHER_DEFAULT_LAT = float(os.getenv('WEATHER_DEFAULT_LAT', '28.644800'))
        WEATHER_DEFAULT_LON = float(os.getenv('WEATHER_DEFAULT_LON', '77.216721'))
    except Exception:
        WEATHER_DEFAULT_LAT = 28.644800
        WEATHER_DEFAULT_LON = 77.216721
except Exception:
    # dotenv not installed or failed; assume env vars are set externally
    pass

# Caching Configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300,  # 5 minutes default
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
            'CULL_FREQUENCY': 3,
        }
    }
}

# Optionally import production settings when deploying (set DJANGO_PRODUCTION=1)
if os.getenv('DJANGO_PRODUCTION', '').lower() in ('1', 'true', 'yes'):
    try:
        from .production_settings import *  # noqa: F401,F403
    except Exception:
        # If production settings fail to import, continue with base settings
        pass
